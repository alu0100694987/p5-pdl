script[type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"]
script[type="text/x-mathjax-config"]
  |  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}}); 
script[type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"]

br
| Gram&aacute;tica utilizada en la pr&aacute;ctica, definida como $G =(\Sigma,V,P,S)$:

ol
  li
    |  $\Sigma = \{ ;, ., =, CONST, VAR, PROCEDURE, ID, P, ODD, CALL, END, IF, THEN, WHILE, DO, +, -, *, /, ==, <, >, <=, >=, !=, (, ), NUM \}$, 
  li
    |  $V = \{ program, block, statement, condition, expression, term, factor \}$ 
  li
    |  Producciones: 
    ol
      li
        |  program $ \rightarrow$ block '.'
      li
        |  block $ \rightarrow$ [CONST ID '=' NUM {',' ID '=' NUM} ';'] [VAR ID {',' ID} ';'] {PROCEDURE ID ';' block ';'} statement
      li
        |  statement $ \rightarrow$ ID '=' expression $\vert$ CALL ID $\vert$ BEGIN statement ';' {statement ';'} END $\vert$ IF condition THEN statment $\vert$ WHILE condition DO statment
      li
        |  condition $ \rightarrow$ ODD expression $\vert$ expression '(==|#|<|>|<=|>=|!=)' expression
      li
        |  expression $ \rightarrow$ term '(+|-)' expression $\vert$ term 
      li
        |  term $ \rightarrow$ factor '(*|/)' term $\vert$ factor 
      li
        |  factor $ \rightarrow$ '(' expression ')' $\vert$ ID $ \vert$ NUM 
  li
    |  S&iacute;mbolo de inicio: $program$ 
br
br
br
